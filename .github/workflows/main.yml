name: Deploy

on:
  push:
    branches:
      - feature/github-action

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  DEPLOY_PATH: /home/ubuntu/deploy

jobs:
  build:
    environment: develop
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install pnpm
        run: sudo corepack enable

      - name: Setup pnpm store path
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Generate Environment Variables File
        run: |
          echo "NEXT_PUBLIC_MODE=$NEXT_PUBLIC_MODE" >> .env.development
          echo "NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL" >> .env.development
          echo "NEXT_PUBLIC_GOOGLE_LOGIN_CLIENT_ID=$NEXT_PUBLIC_GOOGLE_LOGIN_CLIENT_ID" >> .env.development
          echo "NEXT_PUBLIC_GOOGLE_LOGIN_REDIRECT_URI=$NEXT_PUBLIC_GOOGLE_LOGIN_REDIRECT_URI" >> .env.development
          echo "NEXT_PUBLIC_GOOGLE_LOGIN_CLIENT_PW=$NEXT_PUBLIC_GOOGLE_LOGIN_CLIENT_PW" >> .env.development
        env:
          NEXT_PUBLIC_MODE: ${{ secrets.NEXT_PUBLIC_MODE }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_GOOGLE_LOGIN_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_LOGIN_CLIENT_ID }}
          NEXT_PUBLIC_GOOGLE_LOGIN_REDIRECT_URI: ${{ secrets.NEXT_PUBLIC_GOOGLE_LOGIN_REDIRECT_URI }}
          NEXT_PUBLIC_GOOGLE_LOGIN_CLIENT_PW: ${{ secrets.NEXT_PUBLIC_GOOGLE_LOGIN_CLIENT_PW }}

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Archive build files
        run: zip -r build.zip .next node_modules package.json pnpm-lock.yaml .env.development

      - name: Copy files to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "${EC2_SSH_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
          scp -o StrictHostKeyChecking=no -i ec2_key.pem build.zip ${EC2_USERNAME}@${EC2_HOST}:${DEPLOY_PATH}

      - name: Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "${EC2_SSH_KEY}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${EC2_USERNAME}@${EC2_HOST} "
            cd ${DEPLOY_PATH}
            unzip -o build.zip
            pnpm install --frozen-lockfile --prod
            pm2 restart app || pm2 start .next/standalone/server.js --name app
          "
